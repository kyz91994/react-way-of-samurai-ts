{"version":3,"sources":["redux/dialog-reducer.ts","hoc/withAuthRedirect.tsx","components/Friends/Friends.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","utils/map-helper.ts","redux/user-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Settings/Settings.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Friends/FriendsContainer.tsx","components/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/common/Paginator/Paginator.tsx","asserts/images/pngtree-users-vector-icon-png-image_3725294.jpeg","components/Users/User.tsx","components/Users/Users.tsx","asserts/images/spinning-circles.svg","components/common/Preloader.tsx","redux/user-selector.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileStatusHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","utils/validators/validator.ts","components/common/FormsControls/Forms.module.css","components/common/FormsControls/FormsControl.tsx","components/Navbar/Navbar.module.css","components/common/Paginator/Paginator.module.css","components/Profile/MyPosts/Mypost.module.css","components/Header/Header.module.css"],"names":["initialState","messagesData","id","message","dialogsData","userName","img","dialogReducer","state","action","type","newMessage","newMessageBody","addMessageActionCreator","mapStateToProps","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","instance","axios","create","withCredentials","baseURL","headers","userAPI","getUsers","currentPage","pageSize","get","then","response","data","unFollowUser","delete","followUser","post","profileApi","userId","status","put","authAPI","email","password","rememberMe","postsData","likesCount","profile","setUserStatus","links","navLink","tittle","friends","genericMap","items","itemId","objPropName","actionObj","map","u","users","totalUsersCount","isFetching","isFollowingInProgress","onFollowButton","onUnFollowButton","setToggleIsFetching","toggleFollowingProgress","followUnfollowUserThunkCreator","dispatch","apiMethod","a","resultCode","login","setAuthUser","getAuthUserData","res","initialized","rootReducer","combineReducers","profilePage","newPost","newPostBody","dialogsPage","sideBarPage","userPage","followed","page","usersCount","filter","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","Settings","Music","News","FriendsContainer","friendsList","f","className","c","avatar","src","Navbar","sideBar","l","item","activeClassName","activeLink","style","display","margin","width","navbar","NavbarContainer","Paginator","totalItemsCount","onPageChange","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftBorderOfPortion","rightBorderOfPortion","disabled","onClick","alert","p","styles","selected","numberOfPage","User","user","unFollowUserThunkCreator","followUserThunkCreator","padding","alt","photos","small","photoUser","name","some","Users","Preloader","loader","getUsersReSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getIsFollowingInProgress","UsersAPIComponent","getUsersThunkCreator","this","React","totalCount","bind","ProfileStatusWithHooks","editMode","setEditMode","localStatus","setLocalStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileInfo","descriptionBlock","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Post","maxLength10","maxLengthCreator","MyPostReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","MyPost","memo","console","log","posts","index","formData","addPost","myPost","postsBlock","MyPostContainer","addPostActionCreator","Profile","ProfileContainer","match","params","authorizedUserId","toString","history","setUserProfileTC","setUserStatusTC","updateUserStatusTC","withRouter","Header","header","login_block","logout","HeaderContainer","maxLength20","LoginReduxForm","error","Input","errorPassOrEmail","messages","length","stopSubmit","_error","DialogsContainer","lazy","App","initializeApp","path","render","fallback","UsersContainer","ReactDOM","StrictMode","document","getElementById","maxLength","input","meta","hasError","touched","formControl"],"mappings":"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","file":"static/js/main.e00b349a.chunk.js","sourcesContent":["import {ActionsTypes, DialogsPageType, MessageType} from \"./store\";\nconst initialState:DialogsPageType = {\n    messagesData: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'I`s my first project'},\n        {id: 3, message: 'Kavabanga'},\n    ],\n    dialogsData: [\n        {id: 1, userName: 'Julia', img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg'},\n        {id: 2, userName: 'Artem', img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg'},\n        {id: 3, userName: 'John', img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg'},\n        {\n            id: 4,\n            userName: 'Evgeniy',\n            img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg'\n        },\n        {\n            id: 5,\n            userName: 'Viktor',\n            img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg'\n        },\n    ],\n}\nexport const dialogReducer = (state:DialogsPageType = initialState, action:ActionsTypes):DialogsPageType => {\n    switch (action.type) {\n        case 'SAMURAI-NET/DIALOG/ADD-MESSAGE':\n            const newMessage: MessageType = {\n                id: 5, message: action.newMessageBody,\n            }\n            return {...state,messagesData:[...state.messagesData,newMessage ],}\n        default: return state\n    }\n}\nexport const addMessageActionCreator = (newMessageBody:string) => ({type: 'SAMURAI-NET/DIALOG/ADD-MESSAGE',newMessageBody} as const)\n","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType):mapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\nexport function withAuthRedirect<T>(Component:ComponentType<T>){\n\n    const RedirectComponent = (props:mapStateToPropsType)=> {\n        let {isAuth, ...restProps} = props\n        if(!isAuth) return <Redirect to={'/login'}/>\n        return  <Component {...restProps as T}/>\n    }\n    return connect(mapStateToProps) (RedirectComponent)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Friends_avatar__23sQC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import axios from \"axios\";\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\n    headers: {\n        'API-KEY': 'c52baf86-5b23-4558-8b14-2fc821e20411'\n    }\n})\nexport const userAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    unFollowUser(id: number) {\n        return instance.delete(`follow/${id}`)\n            .then(response => response.data)\n    },\n    followUser(id: number) {\n        return instance.post(`follow/${id}`, {})\n            .then(response => response.data)\n    }\n}\nexport const profileApi = {\n    getProfile(userId: string){\n        return instance.get(`profile/${userId}`)\n            .then(response=> response.data)\n    },\n    getUserStatus(userId: string){\n        return instance.get(`profile/status/${userId}`)\n            .then(response=> response.data)\n    },\n    updateUserStatus(status:string){\n        return instance.put('/profile/status',{status:status} )\n    }\n}\nexport const authAPI = {\n    me(){\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean = false){\n        return instance.post(`auth/login`, {email, password, rememberMe})\n    },\n    logout(){\n        return instance.delete(`auth/login`)\n    }\n}","import {ActionsTypes, PostType, ProfilePageType} from \"./store\";\nimport {profileApi} from \"../api/api\";\nimport {dispatchType, thunkType} from \"./user-reducer\";\n\nexport type ProfileType = {\n    aboutMe?: string,\n    contacts?: {\n        facebook: string | null,\n        website: string | null,\n        vk: string | null,\n        twitter: string | null,\n        instagram: string | null,\n        youtube: string | null,\n        github: string | null,\n        mainLink: string | null\n    },\n    lookingForAJob?: boolean,\n    lookingForAJobDescription?: string,\n    fullName?: string,\n    userId?: number,\n    photos?: {\n        small: string,\n        large: string\n    }\n}\nconst initialState: ProfilePageType = {\n    postsData: [\n        {id: 1, message: 'Hi, how are you', likesCount: 12},\n        {id: 2, message: 'I`d like to drink', likesCount: 111},\n        {id: 3, message: 'Go to it-incubator', likesCount: 112},\n    ],\n    status: '',\n    profile: {\n        // aboutMe: \"я круто чувак 1001%\",\n        // contacts: {\n        //     facebook: \"facebook.com\",\n        //     website: null,\n        //     vk: \"vk.com/dimych\",\n        //     twitter: \"https://twitter.com/@sdf\",\n        //     instagram: \"instagra.com/sds\",\n        //     youtube: null,\n        //     github: \"github.com\",\n        //     mainLink: null\n        // },\n        // lookingForAJob: true,\n        // lookingForAJobDescription: \"не ищу, а дурачусь\",\n        // fullName: \"samurai dimych\",\n        // userId: 2,\n        // photos: {\n        //     small: \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\",\n        //     large: \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\n        // }}\n    }\n}\n\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\n    switch (action.type) {\n        case  'SAMURAI-NET/PROFILE/ADD-POST':\n            const newPost: PostType = {\n                id: 5, message: action.newPostBody, likesCount: 12\n            }\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost],\n            }\n        case 'SAMURAI-NET/PROFILE/SET-USER-PROFILE':\n            return {\n                ...state,\n                profile: action.profile\n\n            }\n        case 'SAMURAI-NET/PROFILE/SET-USER-STATUS':\n            return {\n                ...state,\n                status: action.status\n\n            }\n        default:\n            return state\n    }\n}\nexport const addPostActionCreator = (newPostBody: string) => ({\n    type: 'SAMURAI-NET/PROFILE/ADD-POST',\n    newPostBody} as const)\nexport const setUserProfile = (profile: ProfileType) => ({\n    type: 'SAMURAI-NET/PROFILE/SET-USER-PROFILE',\n    profile} as const)\nexport const setUserStatus = (status: string) => ({type: 'SAMURAI-NET/PROFILE/SET-USER-STATUS', status} as const)\n\nexport const setUserProfileTC = (userId: string): thunkType => async (dispatch: dispatchType) => {\n    let data = await profileApi.getProfile(userId)\n    dispatch(setUserProfile(data))\n}\nexport const setUserStatusTC = (userId: string): thunkType => async (dispatch: dispatchType) => {\n    let data = await profileApi.getUserStatus(userId)\n    dispatch(setUserStatus(data))\n}\nexport const updateUserStatusTC = (status: string): thunkType => async (dispatch: dispatchType) => {\n    let response = await profileApi.updateUserStatus(status)\n    if (response.data.resultCode === 0) {\n        dispatch(setUserStatus(status))\n    }\n}\n","import {ActionsTypes, SideBarPageType} from \"./store\";\nconst initialState: SideBarPageType = {\n    links: [\n        {id:'1',navLink:'/profile', tittle: 'Profile' },\n        {id:'2',navLink:'/dialogs' , tittle: 'Messages' },\n        {id:'3',navLink:'/news', tittle: 'News'},\n        {id:'4',navLink:'/music', tittle: 'Music'},\n        {id:'5',navLink:'/settings', tittle: 'Settings'},\n        {id:'6',navLink:'/friends', tittle: 'Friends'},\n        {id:'7',navLink:'/users', tittle: 'Users'},\n    ],\n    friends: [\n        {id: 1, img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg', userName: 'Julia'},\n        {id: 2, img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg', userName: 'Artem'},\n        {id: 3, img: 'https://cs8.pikabu.ru/post_img/2016/07/09/10/1468084255134888644.jpg', userName: 'John'},\n    ]\n}\n\nexport const sideBarReducer = (state:SideBarPageType = initialState, action: ActionsTypes):SideBarPageType => {\n    return state\n}","import {UserType} from \"../redux/user-reducer\";\n\nexport const genericMap = (items: UserType[], itemId: number, objPropName: 'id', actionObj: {followed: boolean})=> {\n    return items.map(u => {\n            if (u[objPropName] === itemId) {\n                return {...u, ...actionObj}\n            }\n            return u\n        }\n    )\n}","import {ActionsTypes} from \"./store\";\nimport {userAPI} from \"../api/api\";\nimport {genericMap} from \"../utils/map-helper\";\n\nexport type UserType = {\n    id: number\n    name: string\n    photos:\n        {\n            small: string\n            large: string\n        }\n    followed: boolean\n    status: string\n}\n\nexport type UsersPageType = {\n    users: UserType[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    isFollowingInProgress: number[]\n}\nconst initialState: UsersPageType = {\n    users: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    isFollowingInProgress: [],\n}\n\nexport const userReducer = (state: UsersPageType = initialState, action: ActionsTypes): UsersPageType => {\n    switch (action.type) {\n        case 'SAMURAI-NET/USER/SET-USERS':\n            return {\n                ...state, users: action.users\n            }\n        case  'SAMURAI-NET/USER/UNFOLLOW':\n            return {\n                ...state,\n                users: genericMap(state.users,action.userId, 'id', {followed: false})\n            }\n\n        case 'SAMURAI-NET/USER/FOLLOW':\n            return {\n                ...state,\n                users: genericMap(state.users,action.userId, 'id', {followed: true})\n            }\n        case 'SAMURAI-NET/USER/SET-CURRENT-PAGE': {\n            return {\n                ...state, currentPage: action.page\n            }\n        }\n        case 'SAMURAI-NET/USER/SET-TOTAL-USER-COUNT': {\n            return {\n                ...state, totalUsersCount: action.usersCount\n            }\n        }\n        case 'SAMURAI-NET/USER/TOGGLE-IS-FETCHING': {\n            return {\n                ...state, isFetching: action.isFetching\n            }\n        }\n        case 'SAMURAI-NET/USER/TOGGLE-IS-FOLLOWING-PROGRESS': {\n            return {\n                ...state,\n                isFollowingInProgress: action.isFetching\n                    ? [...state.isFollowingInProgress, action.userId]\n                    : state.isFollowingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\nexport const onFollowButton = (userId: number) => ({type: 'SAMURAI-NET/USER/FOLLOW', userId} as const)\nexport const onUnFollowButton = (userId: number) => ({type: 'SAMURAI-NET/USER/UNFOLLOW', userId} as const)\nexport const setUsers = (users: UserType[]) => ({type: 'SAMURAI-NET/USER/SET-USERS', users} as const)\nexport const setCurrentPage = (page: number) => ({type: 'SAMURAI-NET/USER/SET-CURRENT-PAGE', page} as const)\nexport const setTotalUsersCount = (usersCount: number) => ({\n    type: 'SAMURAI-NET/USER/SET-TOTAL-USER-COUNT',\n    usersCount\n} as const)\nexport const setToggleIsFetching = (isFetching: boolean) => ({\n    type: 'SAMURAI-NET/USER/TOGGLE-IS-FETCHING',\n    isFetching\n} as const)\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\n    type: 'SAMURAI-NET/USER/TOGGLE-IS-FOLLOWING-PROGRESS',\n    isFetching,\n    userId\n} as const)\n\nexport type dispatchType = (action: ActionsTypes) => void\nexport type thunkType = (thunk: dispatchType) => void\nexport type getUsersThunkCreatorType = (currentPage: number, pageSize: number) => thunkType\n\nexport const getUsersThunkCreator: getUsersThunkCreatorType = (currentPage: number, pageSize: number): thunkType => {\n    return async (dispatch: dispatchType) => {\n        dispatch(setToggleIsFetching(true))\n        dispatch(setCurrentPage((currentPage)))\n        let data = await userAPI.getUsers(currentPage, pageSize)\n        dispatch(setToggleIsFetching(false))\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n    }\n}\nexport const unFollowUserThunkCreator = (userId: number): thunkType => async (dispatch: dispatchType) => {\n      followUnfollowUserThunkCreator(dispatch, userId,userAPI.unFollowUser.bind(userAPI),onUnFollowButton )\n}\n\nexport const followUserThunkCreator = (userId: number): thunkType => async (dispatch: dispatchType) =>{\n      followUnfollowUserThunkCreator(dispatch, userId,userAPI.followUser.bind(userAPI),onFollowButton )\n}\n\nexport const followUnfollowUserThunkCreator = async (dispatch: dispatchType,userId: number, apiMethod: (id:number)=>Promise<any>, action:(id: number)=>ActionsTypes  ) => {\n        dispatch(toggleFollowingProgress(true, userId))\n        let data = await apiMethod(userId)\n\n        if (data.resultCode === 0) {\n            dispatch(action(userId))\n        }\n    dispatch(toggleFollowingProgress(false, userId))\n}\n\n","import {ActionsTypes} from \"./store\";\nimport {authAPI} from \"../api/api\";\n\nimport {Dispatch} from \"redux\";\nimport {stopSubmit} from \"redux-form\";\n\nexport type AuthType = {\n    id: number\n    email: string\n    login: string\n    isAuth: boolean\n    // isFetching: boolean\n}\nconst initialState = {\n    id: 0,\n    email: '',\n    login: '',\n    isAuth: false,\n    // isFetching: false\n}\n\nexport const authReducer = (state: AuthType = initialState, action: ActionsTypes): AuthType => {\n    switch (action.type) {\n        case 'SAMURAI-NET/AUTH/SET-USER-DATA':\n            return {\n                ...state,\n                ...action.data,\n            }\n        // case 'SAMURAI-NET/AUTH/TOGGLE-IS-FETCHING': {\n        //     return {\n        //         ...state, isFetching: action.isFetching\n        //     }\n        // }\n\n        default:\n            return state\n    }\n}\nexport const setAuthUser = (id: number, email: string, login: string, isAuth: boolean) => ({\n    type: 'SAMURAI-NET/AUTH/SET-USER-DATA',\n    data: {id, email, login, isAuth}\n} as const)\n// export const setToggleIsFetchingLogin = (isFetching: boolean) => ({\n//     type: 'SAMURAI-NET/AUTH/TOGGLE-IS-FETCHING',\n//     isFetching\n// } as const)\n\n\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\n    let res = await authAPI.me()\n    if (res.data.resultCode === 0) {\n        let {id, email, login} = res.data.data\n        dispatch(setAuthUser(id, email, login, true))\n    }\n}\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch) => {\n    let res = await authAPI.login(email, password, rememberMe)\n    if (res.data.resultCode === 0) {\n        dispatch<any>(getAuthUserData())\n\n    } else {\n        let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n\n}\nexport const logout = () => async (dispatch: Dispatch) => {\n    let res = await authAPI.logout()\n    if (res.data.resultCode === 0) {\n        dispatch(setAuthUser(0, '', '', false))\n    }\n}\n","import {ActionsTypes} from \"./store\";\nimport {Dispatch} from \"redux\";\nimport {getAuthUserData} from \"./auth-reducer\";\nexport type InitializedType = {\n    initialized: boolean\n}\nconst initialState = {\n    initialized: false\n}\n\nexport const appReducer = (state: InitializedType = initialState, action: ActionsTypes): InitializedType => {\n    switch (action.type) {\n        case 'SAMURAI-NET/APP/INITIALIZE-SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state\n    }\n}\nexport const setInitialized = () => ({type: 'SAMURAI-NET/APP/INITIALIZE-SUCCESS',} as const)\n\n\nexport const initializeApp = () => (dispatch: Dispatch) => {\n    dispatch<any>(getAuthUserData())\n        .then(()=>{\n            dispatch(setInitialized())\n        })\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogReducer} from \"./dialog-reducer\";\nimport {sideBarReducer} from \"./sidebar-reducer\";\nimport {userReducer} from \"./user-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport thunkMiddleWare from 'redux-thunk'\nimport {reducer as formReducer} from 'redux-form'\nimport {appReducer} from \"./app-reducer\";\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogReducer,\n    sideBarPage: sideBarReducer,\n    userPage: userReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n\n})\nexport type AppStateType = ReturnType<typeof rootReducer>\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare))\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nexport const store = createStore(rootReducer,composeEnhancers(applyMiddleware(thunkMiddleWare)\n));\n","import React from \"react\"\nimport c from './Settings.module.css'\n;\n\nfunction Settings(props:any){\n    return(\n        <div>\n            Settings\n        </div>\n    )\n}\nexport default Settings","import React from \"react\"\nimport c from './Music.module.css'\n;\n\nfunction Music(props:any){\n    return(\n        <div>\n           Music\n        </div>\n    )\n}\nexport default Music","import React from \"react\"\nimport c from './News.module.css'\n;\n\nfunction News(){\n    return(\n        <div>\n            News\n        </div>\n    )\n}\nexport default News","import {SideBarPageType} from \"../../redux/store\";\nimport {connect} from \"react-redux\";\nimport {Friends} from \"./Friends\";\nimport {AppStateType} from \"../../redux/redux-store\";\ntype MapStateToProps = {\n    sideBarPage : SideBarPageType\n}\nconst mapStateToProps = (state: AppStateType):MapStateToProps => {\n    return{\n        sideBarPage : state.sideBarPage\n    }\n}\nexport const FriendsContainer = connect(mapStateToProps)(Friends)","import React from \"react\";\nimport {SideBarPageType, StateType} from \"../../redux/store\";\nimport c from './Friends.module.css'\n\ntype FriendsPropsType = {\n    sideBarPage: SideBarPageType\n}\nexport const Friends = (props:FriendsPropsType) => {\n\n    const friendsList = props.sideBarPage.friends.map(f => <div key={f.id}>\n        <img className={c.avatar} src={f.img}/>\n        <div>{f.userName}</div>\n    </div>)\n\n    return (\n        <div>\n            {friendsList}\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport c from './Navbar.module.css';\nimport {SideBarPageType} from \"../../redux/store\";\ntype NavBarPropsType = {\n    sideBarPage: SideBarPageType\n}\n\nfunction Navbar(props:NavBarPropsType) {\n            let state = props.sideBarPage\n\n            const sideBar = state.links.map(l => <div key={l.id} className={c.item}>\n                <NavLink to={l.navLink} activeClassName={c.activeLink}>{l.tittle}</NavLink>\n            </div>)\n\n            const friends = state.friends.map(f => <div key={f.id}\n                style={{\n                    display: \"inline-block\",\n                    margin: '5px',\n                }}>\n                <NavLink to={'/dialogs/' + f.id}>\n                    <img width={'30px'} src={f.img}/>\n                    <div>{f.userName}</div>\n                </NavLink></div>)\n\n            return (\n                <nav className={c.navbar}>\n                    <div>\n                        {sideBar}\n                    </div>\n                    <div>\n                        {friends}\n                    </div>\n                </nav>\n            )\n\n}\n\nexport default Navbar","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {SideBarPageType} from \"../../redux/store\";\nimport Navbar from \"./Navbar\";\nimport {AppStateType} from \"../../redux/redux-store\";\ntype MapStateToPropsType = {\n    sideBarPage: SideBarPageType\n}\n\nconst mapStateToProps = (state:AppStateType):MapStateToPropsType=> {\n    return{\n        sideBarPage: state.sideBarPage\n    }\n}\nexport const NavbarContainer = connect(mapStateToProps)(Navbar)","import React, {useState} from \"react\";\nimport styles from './Paginator.module.css'\n\ntype PaginatorPropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    onPageChange: (p: number) => void\n    portionSize: number\n}\nexport const Paginator = ({totalItemsCount,pageSize, currentPage, onPageChange, portionSize = 10} : PaginatorPropsType) => {\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    const portionCount = Math.ceil(pagesCount/portionSize)\n    const [portionNumber, setPortionNumber] = useState<number>(1)\n    const leftBorderOfPortion = (portionNumber-1)*10+1\n    const rightBorderOfPortion = portionSize*portionNumber\n    const onNextButtonHandler = () => {\n        setPortionNumber(portionNumber+1)\n        onPageChange((portionNumber)*10+1)\n        alert(portionNumber)\n    }\n    const onPrevButtonHandler = () => {\n        setPortionNumber(portionNumber-1)\n        onPageChange((portionNumber-2)*10+1)\n        alert(portionNumber)\n    }\n\n    return (\n            <div>\n                <button disabled={leftBorderOfPortion<=1} onClick={onPrevButtonHandler}>PREV</button>\n                {pages\n                    .filter(p=>p>=leftBorderOfPortion && p <=rightBorderOfPortion  )\n                    .map(p => <span key={p} className={(currentPage === p) ? `${styles.selected}` : `${styles.numberOfPage}`} onClick={() => {\n                   onPageChange(p)\n                }}>{p}</span>)}\n                <button disabled={rightBorderOfPortion >= portionCount} onClick={onNextButtonHandler}>NEXT</button>\n\n            </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/pngtree-users-vector-icon-png-image_3725294.6a3ddcf3.jpeg\";","import {NavLink} from \"react-router-dom\";\nimport photoUser from \"../../asserts/images/pngtree-users-vector-icon-png-image_3725294.jpeg\";\nimport React from \"react\";\nimport {UserType} from \"../../redux/user-reducer\";\ntype UserPropsType = {\n    user: UserType\n    isFollowingInProgress: number[]\n    unFollowUserThunkCreator: (userId: number) => void\n    followUserThunkCreator: (userId: number) => void\n}\n\nexport const User = ({user,isFollowingInProgress, unFollowUserThunkCreator, followUserThunkCreator }: UserPropsType) => {\n    return (\n        <div style={{padding: '10px'}}>\n            <div>\n                <NavLink to={'profile/' + user.id}>\n                    <img alt={'avatar'} style={{width: '100px'}}\n                         src={user.photos.small ? user.photos.small : photoUser}/>\n                </NavLink>\n            </div>\n            <div>{user.name}</div>\n            <div>{user.status}</div>\n            <div>Russia</div>\n            <div>\n                {user.followed\n                    ? <button disabled={isFollowingInProgress.some((id: number) => id === user.id)} onClick={() => {\n                        unFollowUserThunkCreator(user.id)\n                    }}>Unfollow</button>\n                    : <button disabled={isFollowingInProgress.some((id: number) => id === user.id)} onClick={() => {\n                        followUserThunkCreator(user.id)\n\n                    }}\n                    >Follow</button>}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport { UserType} from \"../../redux/user-reducer\";\nimport {Paginator} from \"../common/Paginator/Paginator\";\nimport {User} from \"./User\";\n\ntype UsersPropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    onPageChange: (p: number) => void\n    users: UserType[]\n    isFetching: boolean\n    isFollowingInProgress: number[]\n    unFollowUserThunkCreator: (userId: number) => void\n    followUserThunkCreator: (userId: number) => void\n\n}\nexport const Users = ({totalUsersCount,pageSize, currentPage, onPageChange, users, ...props }: UsersPropsType) => {\n    return (\n        <div>\n            <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage} onPageChange={onPageChange} portionSize={10}/>\n            {users.map((u: UserType) => <User  key={u.id} user={u} isFollowingInProgress={props.isFollowingInProgress}\n                                              unFollowUserThunkCreator={props.unFollowUserThunkCreator}\n                                              followUserThunkCreator={props.followUserThunkCreator}/>\n\n            )}\n        </div>)\n}","export default __webpack_public_path__ + \"static/media/spinning-circles.cff806a7.svg\";","import React from \"react\";\nimport loader from \"../../asserts/images/spinning-circles.svg\";\n\ntype PreloaderPropsType = {}\nexport const Preloader = (props: PreloaderPropsType) => {\n    return (\n        <div>\n            <img alt='loading...' src={loader}/>\n        </div>\n    )\n}","import {AppStateType} from \"./redux-store\";\nimport {createSelector} from \"reselect\";\nimport {UserType} from \"./user-reducer\";\n\nexport const getUsersSelector = (state: AppStateType) => (state.userPage.users)\nexport const getUsersReSelector = createSelector(getUsersSelector, (users:UserType[])=> users.filter(u=>true))\nexport const getPageSize = (state: AppStateType) => (state.userPage.pageSize)\nexport const getTotalUsersCount = (state: AppStateType) => (state.userPage.totalUsersCount)\nexport const getCurrentPage = (state: AppStateType) => (state.userPage.currentPage)\nexport const getIsFetching = (state: AppStateType) => (state.userPage.isFetching)\nexport const getIsFollowingInProgress = (state: AppStateType) => (state.userPage.isFollowingInProgress)\n","import React from \"react\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\nimport {\n    followUserThunkCreator,\n    getUsersThunkCreator,\n    unFollowUserThunkCreator,\n    UserType\n} from \"../../redux/user-reducer\";\n\nimport {Users} from \"./Users\";\nimport {Preloader} from \"../common/Preloader\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getIsFetching, getIsFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount, getUsersReSelector,\n\n} from \"../../redux/user-selector\";\n\nexport type MapStatePropsType = {\n    users: UserType[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    isFollowingInProgress: number[]\n}\nexport type mapDispatchToProps = {\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\n    unFollowUserThunkCreator: (userId: number) => void,\n    followUserThunkCreator: (userId: number) => void\n}\nexport type UsersPropsType = MapStatePropsType & mapDispatchToProps\n\n\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\n\n    componentDidMount() {\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChange = (page: number) => {\n        this.props.getUsersThunkCreator(page, this.props.pageSize)\n    }\n\n    render() {\n        return (\n            <>\n                {this.props.isFetching ? <Preloader/> : null}\n                <Users\n                    totalUsersCount={this.props.totalUsersCount} pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage} onPageChange={this.onPageChange}\n                    users={this.props.users}\n                    isFetching={this.props.isFetching}\n                    isFollowingInProgress={this.props.isFollowingInProgress}\n                    unFollowUserThunkCreator={this.props.unFollowUserThunkCreator}\n                    followUserThunkCreator={this.props.followUserThunkCreator}\n                />\n            </>\n        )\n\n    }\n\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        users: getUsersReSelector(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        isFollowingInProgress: getIsFollowingInProgress(state)\n    }\n}\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUsersThunkCreator, unFollowUserThunkCreator, followUserThunkCreator\n    })\n)(UsersAPIComponent)\n\n","import React, {ChangeEvent, useEffect, useState} from 'react'\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localStatus, setLocalStatus] = useState<string>(props.status)\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n    const deActivateMode = () => {\n        setEditMode(false)\n        props.updateUserStatus(localStatus)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setLocalStatus(e.currentTarget.value)\n    }\n    useEffect(()=>{\n        setLocalStatus(props.status)\n    },[props.status])\n    return (\n        <>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateMode}>{props.status|| 'No status'}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateMode}\n                       value={localStatus}/>\n            </div>\n            }\n        </>\n    )\n\n}\n\n\n","import React from \"react\";\nimport c from './ProfileInfo.module.css'\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport photoUser from '../../../asserts/images/pngtree-users-vector-icon-png-image_3725294.jpeg'\nimport {Preloader} from \"../../common/Preloader\";\nimport ProfileStatus from \"../ProfileStatus\";\nimport {ProfileStatusWithHooks} from \"../ProfileStatusHooks\";\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType\n    status: string\n    updateUserStatus:(status:string)=> void\n}\n\nfunction ProfileInfo(props: ProfileInfoPropsType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <div>\n                {/*<img*/}\n                {/*    src='https://img.championat.com/s/735x490/news/big/o/j/stadion-finala-evro-serdce-futbola_16260263101386131676.jpg'/>*/}\n            </div>\n            <div className={c.descriptionBlock}>\n                {props.profile.photos ?\n                    <img width={'150px'} src={props.profile.photos.small ? props.profile.photos.small : photoUser}/> :\n                    <img width={'150px'} src={photoUser}/>\n                }\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus} />\n\n\n                <ul>\n                    <li>\n                        My name: {props.profile.fullName}\n                    </li>\n                    <li>\n                        About me: {props.profile.aboutMe ? props.profile.aboutMe : 'No information'}\n                    </li>\n                    <li>\n                        Looking for a\n                        job:{props.profile.lookingForAJob ? props.profile.lookingForAJob : 'No information'}\n                    </li>\n                    <li>\n                        Looking for a job\n                        description:{props.profile.lookingForAJobDescription ? props.profile.lookingForAJobDescription : 'No information'}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo","import React from \"react\"\nimport c from './Post.module.css'\n\nexport type PostPropsType = {\n    message: string,\n    likesCount: number\n}\nfunction Post(props: PostPropsType) {\n    return (\n        <div className={c.item}>\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSye8_F5ZHKn2FQ51IdAmOKH3VaIfKkZLXVEA&usqp=CAU'/>\n            <span>{props.message}</span>\n            <div>\n                <span>{props.likesCount} </span>\n                <span>like</span>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Post","import React from \"react\"\nimport c from './Mypost.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsDataType} from \"../../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\nimport {TextArea} from \"../../common/FormsControls/FormsControl\";\n\n\ntype MyPostPropsType = {\n    posts: PostsDataType\n    addPost: (newPostBody: string)=>void\n}\ntype FormDataType = {\n    myPost: string\n}\nconst maxLength10 = maxLengthCreator(10)\n\nconst MyPostForm = (props:InjectedFormProps<FormDataType>) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name={'myPost'} validate={[required, maxLength10]} placeholder='Add post'/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst MyPostReduxForm = reduxForm<FormDataType>({form: 'myPost'})(MyPostForm)\n\nconst MyPost = React.memo((props: MyPostPropsType) => {\n    console.log('render yo')\n    let posts = props.posts.map((p, index) => <Post key={index} message={p.message}\n                                                                    likesCount={p.likesCount}/>)\n    const onSubmit = (formData: FormDataType) => {\n        props.addPost(formData.myPost)\n    }\n    return (\n        <div className={c.posts}>\n            <h3>My posts</h3>\n            <div>\n                <MyPostReduxForm onSubmit={onSubmit}/>\n            </div>\n            <div className={c.postsBlock}>\n                {\n                    posts\n                }\n            </div>\n        </div>\n    )\n\n}\n)\n\nexport default MyPost\n\n","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPost from \"./MyPost\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nconst mapStateToProps = (state:AppStateType)=> {\n    return {\n        posts: state.profilePage.postsData\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch) => {\n    return {\n        addPost: (newPostBody:string) => {\n            dispatch(addPostActionCreator(newPostBody))\n        }\n    }\n}\nexport const MyPostContainer = connect(mapStateToProps,mapDispatchToProps)(MyPost)\n","import React, {ReactNode} from \"react\"\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\nimport {Redirect} from \"react-router-dom\";\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateUserStatus:(status:string)=> void\n    isAuth: boolean\n}\n\nfunction Profile(props: ProfilePropsType) {\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\n            <MyPostContainer/>\n        </div>\n    )\n}\n\nexport default Profile","import React from 'react'\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {ProfileType, setUserProfileTC, setUserStatusTC, updateUserStatusTC} from \"../../redux/profile-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type MapProfileStateToPropsType = {\n    profile: ProfileType\n    status: string\n    isAuth: boolean\n    authorizedUserId: number\n}\nexport type MapProfileDispatchToPropsType = {\n    setUserProfileTC: (userId: string) => void\n    setUserStatusTC:(userId:string)=> void\n    updateUserStatusTC:(status:string)=>void\n}\ntype ProfileContainerType = MapProfileStateToPropsType & MapProfileDispatchToPropsType\ntype PathParamType = {\n    userId?: string\n}\ntype ProfilePropsType = RouteComponentProps<PathParamType> & ProfileContainerType\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId.toString()\n            if(!userId){\n                this.props.history.push('/login')\n            }\n        }\n        this.props.setUserProfileTC(userId)\n        this.props.setUserStatusTC(userId)\n    }\n\n    render() {\n        return (\n\n                <Profile isAuth={this.props.isAuth} profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatusTC}/>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapProfileStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    isAuth: state.auth.isAuth,\n    authorizedUserId: state.auth.id\n})\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {setUserProfileTC,setUserStatusTC, updateUserStatusTC}),\n    withRouter\n)(\n    ProfileContainer\n)\n","import React from \"react\";\nimport c from \"./Header.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {HeaderContainerType} from \"./HeaderContainer\";\n\nfunction Header(props:HeaderContainerType) {\n    return (\n        <header className={c.header}>\n            <img src='https://w7.pngwing.com/pngs/664/103/png-transparent-pbc-cska-moscow-sport-pfc-cska-moscow-boxing-sport-logo-association.png'/>\n            <div className={c.login_block}>\n                {props.isAuth?\n                    <div>{props.login}  <button onClick={props.logout}>Log out</button></div>\n                    : <NavLink to={'/login'}>Login</NavLink>\n                }\n            </div>\n        </header>\n    )\n}\nexport default Header","import React from 'react'\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport  {logout} from \"../../redux/auth-reducer\";\n\nexport type MapAuthStateToPropsType = {\n    isAuth: boolean,\n    login: string,\n}\nexport type MapAuthDispatchToPropsType = {\n    // getAuthUserData: () => void\n    logout: () => void\n }\nexport type HeaderContainerType = MapAuthStateToPropsType & MapAuthDispatchToPropsType\n\nclass HeaderContainer extends React.Component<HeaderContainerType> {\n    // componentDidMount() {\n    //     this.props.getAuthUserData()\n    // }\n\n    render(){\n        return(\n            <Header {...this.props}/>\n        )\n    }\n}\nconst mapStateToProps = (state:AppStateType):MapAuthStateToPropsType => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n})\n\nexport default connect(mapStateToProps,{logout})(HeaderContainer)\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport styles from '../common/FormsControls/Forms.module.css'\nimport {Preloader} from \"../common/Preloader\";\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\nconst maxLength20 = maxLengthCreator(20)\nconst LoginForm = ({handleSubmit,error}: InjectedFormProps<FormDataType>) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={'Email'} name={'email'}  component={Input} validate={[required, maxLength20]}/>\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} type={'password'} component={Input} validate={[required, maxLength20]}/>\n            </div>\n            <div>\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}/> remember me\n            </div>\n            {error&&<div className={styles.errorPassOrEmail}>{error}</div>}\n\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\ntype MapDispatchToProps = {\n    login: (email: string, password: string, rememberMe: boolean)=> void\n\n}\ntype MapStateToPropsType = {\n    isAuth: boolean\n    // isFetching: boolean\n}\ntype LoginPropsType = MapDispatchToProps&MapStateToPropsType\nconst mapStateToProps = (state: AppStateType) => ({isAuth: state.auth.isAuth})\nexport const Login = (props: LoginPropsType) => {\n    const onSubmit = (formData:FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n\n    if(props.isAuth){\n        return <Redirect to={'/profile'}/>\n    }\n\n\n    return <>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n\n\n    </>\n}\nexport default connect(mapStateToProps, {login})(Login)\n\n\n","import React, { Suspense } from 'react';\nimport './App.css';\n\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Settings from \"./components/Settings/Settings\";\nimport Music from \"./components/Music/Music\";\nimport News from \"./components/News/News\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport {FriendsContainer} from \"./components/Friends/FriendsContainer\";\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {Preloader} from \"./components/common/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\ntype MapDispatchToProps = {\n    initializeApp: ()=> void\n}\ntype MapStateToProps = {\n    initialized: boolean\n}\ntype AppPropsType = MapStateToProps & MapDispatchToProps\n\nconst DialogsContainer = React.lazy(()=> import('./components/Dialogs/DialogsContainer'))\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if(!this.props.initialized){\n            return <Preloader/>\n        }\n        return (\n            <BrowserRouter>\n                <div className='app-wrapper'>\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className='app-wrapper-content'>\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                        <Route path='/dialogs' render={withSuspense(DialogsContainer) }/>\n                        <Route path='/news' render={() => <News/>}/>\n                        <Route path='/music' render={() => <Music/>}/>\n                        <Route path='/settings' render={() => <Settings/>}/>\n                        <Route path='/friends' render={() => <FriendsContainer/>}/>\n                        <Route path='/users' render={() => <UsersContainer/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                    </div>\n\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToProps=> ({initialized: state.app.initialized})\nexport default compose<React.ComponentType>(connect(mapStateToProps, {initializeApp}))(App) ;\n\n","import React, { Suspense } from \"react\";\nimport {Preloader} from \"../components/common/Preloader\";\n\nexport const withSuspense = (Component: React.ComponentType) => {\n    return (props:any) => {\n        return <Suspense fallback={<div>...Loading</div>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n}","import React from 'react';\nimport './index.css';\nimport {store} from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n\n\n","export const required = (value:string) => {\n    if(value) return undefined\n    return 'Field is required'\n}\n\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\n    if (value.length> maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Forms_formControl__24mxk\",\"error\":\"Forms_error__3wZbc\",\"errorPassOrEmail\":\"Forms_errorPassOrEmail__1M5KP\"};","import React from \"react\";\nimport styles from './Forms.module.css'\n\ntype TextareaPropsType = {\n    input: {}\n    meta: {\n        touched: boolean\n        error: string\n    }\n    placeholder: string\n}\nexport const TextArea = ({input, meta, ...props}: TextareaPropsType) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={ styles.formControl + ' ' + (hasError ? styles.error: '') } >\n            <div>\n                <textarea  {...input} {...props}/>\n            </div>\n            {  hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Input = ({input, meta, ...props}: TextareaPropsType) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={ styles.formControl + ' ' + (hasError ? styles.error: '') } >\n            <div>\n                <input  {...input} {...props}/>\n            </div>\n            {  hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__CLYHD\",\"item\":\"Navbar_item__zmMk4\",\"activeLink\":\"Navbar_activeLink__3etBE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberOfPage\":\"Paginator_numberOfPage__3jRUJ\",\"selected\":\"Paginator_selected__2cTTO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Mypost_posts__3Mh82\",\"postsBlock\":\"Mypost_postsBlock__1UqrT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"login_block\":\"Header_login_block__3dzPh\"};"],"sourceRoot":""}