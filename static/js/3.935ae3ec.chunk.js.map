{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Messages/Messages.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Messages/Messages.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","c","message","DialogItem","dialog","to","id","alt","avatar","src","userName","maxLength100","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","name","validate","required","Dialogs","dialogElements","dialogsPage","dialogsData","map","d","img","messageElements","messagesData","m","dialogs","dialogsItems","messagesItem","formData","addMessage","newMessageBody","compose","withAuthRedirect","connect","state","dispatch","addMessageActionCreator"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,aAAe,gC,oBCAjHD,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,uGCchDC,MAPf,SAAiBC,GACb,OACI,qBAAKC,UAAWC,IAAEC,QAAlB,SAA4BH,EAAMG,W,0BCc3BC,MAdf,SAAoBJ,GAChB,OACI,qBAAKC,UAAWC,IAAEG,OAAlB,SACI,cAAC,IAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,SACI,gCACI,qBAAKC,IAAK,SAAUP,UAAWC,IAAEO,OAAQC,IAAKV,EAAMU,MACnDV,EAAMW,iB,kCCCrBC,EAAeC,YAAiB,KAahCC,EAAmBC,YAAgC,CAACC,KAAM,UAAvCD,EAZL,SAACf,GACjB,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,YAAY,qBAAqBC,UAAWC,IAAUC,KAAM,iBAAkBC,SAAU,CAACC,IAAUb,OAE9G,8BACI,kDA6BDc,EArBE,SAAC1B,GAEd,IAAI2B,EAAiB3B,EAAM4B,YAAYC,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBpB,SAAUoB,EAAEpB,SAAUJ,GAAIwB,EAAExB,GAAIG,IAAKqB,EAAEC,KAA7CD,EAAExB,OAC3E0B,EAAkBjC,EAAM4B,YAAYM,aAAaJ,KAAI,SAAAK,GAAC,OAAI,cAAC,EAAD,CAAoBhC,QAASgC,EAAEhC,QAASI,GAAI4B,EAAE5B,IAAhC4B,EAAE5B,OAI9E,OACI,sBAAKN,UAAWC,IAAEkC,QAAlB,UACI,qBAAKnC,UAAWC,IAAEmC,aAAlB,SACKV,IAEL,sBAAK1B,UAAWC,IAAEoC,aAAlB,UACKL,EACD,cAACnB,EAAD,CAAkBG,SAVX,SAACsB,GAChBvC,EAAMwC,WAAWD,EAASE,0B,uBCXnBC,sBACXC,IACAC,aAhBoB,SAACC,GACrB,MAAO,CACHjB,YAAaiB,EAAMjB,gBAIA,SAACkB,GACxB,MAAO,CACHN,WAAY,SAACC,GACTK,EAASC,YAAwBN,SAK9BC,CAEmChB","file":"static/js/3.935ae3ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messagesItem\":\"Dialogs_messagesItem__FCeL0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Messages_message__3J_zU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3tDA2\",\"avatar\":\"DialogItem_avatar__12OzI\"};","import React from \"react\"\nimport c from './Messages.module.css';\n\nexport type MessagePropsType = {\n    message: string\n    id: number\n}\n\nfunction Message(props: MessagePropsType) {\n    return (\n        <div className={c.message}>{props.message}</div>\n    )\n}\n\n\nexport default Message","import React from \"react\"\nimport {NavLink} from \"react-router-dom\";\nimport c from './DialogItem.module.css';\n\nexport type DialogItemPropsType = {\n    userName: string\n    id: number\n    src: string\n}\n\nfunction DialogItem(props: DialogItemPropsType) {\n    return (\n        <div className={c.dialog}>\n            <NavLink to={'/dialogs/' + props.id}>\n                <div>\n                    <img alt={'avatar'} className={c.avatar} src={props.src}/>\n                    {props.userName}\n                </div>\n\n            </NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem","import React from \"react\"\nimport c from './Dialogs.module.css';\nimport Message from \"./Messages/Messages\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {DialogsPageType} from \"../../redux/store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../common/FormsControls/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\n\ntype DialogsPropsType = {\n    dialogsPage: DialogsPageType\n    addMessage:(newMessageBody:string)=> void\n    // isAuth: boolean\n}\ntype DialogsFormPropsType = {\n    newMessageBody: string\n}\nconst maxLength100 = maxLengthCreator(100)\nconst DialogsForm = (props:InjectedFormProps<DialogsFormPropsType>) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder='Enter your message' component={TextArea} name={'newMessageBody'} validate={[required, maxLength100]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\nconst DialogsReduxForm = reduxForm<DialogsFormPropsType>({form: 'dialog'})(DialogsForm)\n\n\nconst  Dialogs = (props: DialogsPropsType) => {\n\n    let dialogElements = props.dialogsPage.dialogsData.map(d => <DialogItem key={d.id} userName={d.userName} id={d.id} src={d.img}/>)\n    let messageElements = props.dialogsPage.messagesData.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\n    let onAddMessage = (formData:DialogsFormPropsType) => {\n        props.addMessage(formData.newMessageBody)\n    }\n    return (\n        <div className={c.dialogs}>\n            <div className={c.dialogsItems}>\n                {dialogElements}\n            </div>\n            <div className={c.messagesItem}>\n                {messageElements}\n                <DialogsReduxForm onSubmit={onAddMessage}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Dialogs","import React from \"react\"\nimport {addMessageActionCreator} from \"../../redux/dialog-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {DialogsPageType} from \"../../redux/store\";\nimport {compose, Dispatch} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype MapDispatchToProps = {\n    addMessage: (newMessageBody:string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): { dialogsPage: DialogsPageType } => {\n    return {\n        dialogsPage: state.dialogsPage,\n        // isAuth: state.auth.isAuth\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        addMessage: (newMessageBody:string) => {\n            dispatch(addMessageActionCreator(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps))(Dialogs)\n\n"],"sourceRoot":""}